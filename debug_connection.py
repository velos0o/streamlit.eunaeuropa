"""
Script de diagn√≥stico para testar a conex√£o com o Bitrix24

Este script tenta estabelecer uma conex√£o direta com o Bitrix24 usando
as credenciais configuradas e imprime informa√ß√µes detalhadas sobre
o resultado.

Para executar:
streamlit run debug_connection.py
"""
import streamlit as st
import os
import sys
import json
import requests
import pandas as pd
from pathlib import Path
from dotenv import load_dotenv

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Diagn√≥stico de Conex√£o - Bitrix24",
    page_icon="üîç",
    layout="wide"
)

st.title("Diagn√≥stico de Conex√£o com Bitrix24")
st.write("Esta ferramenta testa a conex√£o com o Bitrix24 e exibe informa√ß√µes detalhadas para ajudar a resolver problemas.")

# Carregar vari√°veis de ambiente
with st.expander("Carregamento de configura√ß√µes", expanded=True):
    st.subheader("1. Verificando arquivo .env")
    dotenv_path = Path('.env')
    if dotenv_path.exists():
        st.success("Arquivo .env encontrado")
        load_dotenv(dotenv_path=dotenv_path)
        st.info("Vari√°veis carregadas do arquivo .env")
    else:
        st.warning("Arquivo .env n√£o encontrado")
        alt_dotenv_path = Path('src/ui/streamlit/.env')
        if alt_dotenv_path.exists():
            st.success("Arquivo .env alternativo encontrado")
            load_dotenv(dotenv_path=alt_dotenv_path)
            st.info("Vari√°veis carregadas do arquivo .env alternativo")
        else:
            st.error("Nenhum arquivo .env encontrado!")

    st.subheader("2. Verificando secrets do Streamlit")
    try:
        if hasattr(st, 'secrets') and st.secrets:
            st.success("Secrets do Streamlit encontradas")
            
            # Listar as chaves dispon√≠veis (sem mostrar valores sens√≠veis)
            secret_keys = list(st.secrets.keys())
            st.write("Se√ß√µes/chaves dispon√≠veis:", secret_keys)
            
            # Verificar se√ß√£o 'bitrix'
            if "bitrix" in st.secrets:
                st.success("Se√ß√£o 'bitrix' encontrada nas secrets")
                bitrix_keys = list(st.secrets['bitrix'].keys())
                st.write("Chaves na se√ß√£o 'bitrix':", bitrix_keys)
                
                # Verificar os valores cr√≠ticos (sem revelar completamente)
                if "base_url" in st.secrets['bitrix']:
                    url = st.secrets['bitrix']['base_url']
                    st.write("URL base:", url[:20] + "..." if len(url) > 20 else url)
                if "token" in st.secrets['bitrix']:
                    token = st.secrets['bitrix']['token']
                    st.write("Token configurado:", "‚úì" if token else "‚úó")
                    st.write("Primeiros 4 caracteres do token:", token[:4] + "..." if token else "N/A")
            else:
                st.warning("Se√ß√£o 'bitrix' n√£o encontrada nas secrets")
                
                # Verificar se as chaves est√£o no n√≠vel raiz
                if "BITRIX_BASE_URL" in st.secrets:
                    st.success("Chave 'BITRIX_BASE_URL' encontrada no n√≠vel raiz")
                    url = st.secrets['BITRIX_BASE_URL']
                    st.write("URL base:", url[:20] + "..." if len(url) > 20 else url)
                if "BITRIX_TOKEN" in st.secrets:
                    st.success("Chave 'BITRIX_TOKEN' encontrada no n√≠vel raiz")
                    token = st.secrets['BITRIX_TOKEN']
                    st.write("Token configurado:", "‚úì" if token else "‚úó")
                    st.write("Primeiros 4 caracteres do token:", token[:4] + "..." if token else "N/A")
        else:
            st.warning("Nenhuma secret configurada no Streamlit")
    except Exception as e:
        st.error(f"Erro ao acessar secrets do Streamlit: {str(e)}")

    st.subheader("3. Consolida√ß√£o de configura√ß√µes")
    
    # Determinar os valores finais ap√≥s a consolida√ß√£o de todas as fontes
    # Seguindo a mesma prioridade do c√≥digo real
    final_base_url = None
    final_token = None
    
    # Primeiro, tentar nas secrets do Streamlit
    try:
        if "bitrix" in st.secrets:
            final_base_url = st.secrets["bitrix"]["base_url"]
            final_token = st.secrets["bitrix"]["token"]
        elif "BITRIX_BASE_URL" in st.secrets:
            final_base_url = st.secrets["BITRIX_BASE_URL"]
            final_token = st.secrets["BITRIX_TOKEN"]
    except Exception:
        pass
    
    # Se n√£o encontrou nas secrets, tentar nas vari√°veis de ambiente
    if not final_base_url:
        final_base_url = os.environ.get("BITRIX_BASE_URL")
    if not final_token:
        final_token = os.environ.get("BITRIX_TOKEN")
    
    # Valores padr√£o como √∫ltimo recurso
    if not final_base_url:
        final_base_url = "https://eunaeuropacidadania.bitrix24.com.br/bitrix/tools/biconnector/pbi.php"
    if not final_token:
        final_token = "0z1rgUWgNbR0e53G7T88D9A1gkDWGly7br"
    
    st.write("URL base final:", final_base_url[:20] + "..." if len(final_base_url) > 20 else final_base_url)
    st.write("Token final:", "‚úì Configurado" if final_token else "‚úó N√£o configurado")
    st.write("Primeiros 4 caracteres do token final:", final_token[:4] + "..." if final_token else "N/A")

# Interface para testar conex√£o
st.subheader("Teste de Conex√£o com Bitrix24")

col1, col2 = st.columns(2)

with col1:
    # Permitir editar os valores para teste
    test_url = st.text_input("URL para teste:", value=final_base_url)
    test_token = st.text_input("Token para teste:", value=final_token)

with col2:
    # Op√ß√µes de teste
    test_table = st.selectbox(
        "Tabela para teste:", 
        ["crm_deal", "user", "crm_deal_fields", "crm_deal_uf"]
    )
    
    test_limit = st.number_input("Limite de registros:", min_value=1, max_value=10, value=1)

# Bot√£o para testar a conex√£o
if st.button("Testar Conex√£o", type="primary"):
    st.write("---")
    st.subheader("Resultados do Teste")
    
    # Construir URL e par√¢metros
    url = f"{test_url}?token={test_token}&table={test_table}"
    
    params = {
        "FILTER": {},
        "SELECT": ["*"],
        "limit": test_limit
    }
    
    # Adicionar a categoria de neg√≥cios se for crm_deal
    if test_table == "crm_deal":
        category_id = os.environ.get("BITRIX_CATEGORY_ID", 34)
        try:
            category_id = int(category_id)
        except:
            category_id = 34
        params["FILTER"]["CATEGORY_ID"] = category_id
    
    # Mostrar a requisi√ß√£o
    st.write("URL da requisi√ß√£o:", url.replace(test_token, "TOKEN_OCULTADO"))
    st.write("Par√¢metros:")
    st.json(params)
    
    # Fazer a requisi√ß√£o
    try:
        with st.spinner("Conectando ao Bitrix24..."):
            headers = {
                'Content-Type': 'application/json'
            }
            payload = json.dumps(params)
            
            response = requests.post(url, headers=headers, data=payload, timeout=30)
        
        # Exibir resultados
        st.write("Status da resposta:", response.status_code)
        
        if response.status_code == 200:
            st.success("Conex√£o estabelecida com sucesso!")
            
            try:
                data = response.json()
                
                if isinstance(data, list) and len(data) > 0:
                    st.success(f"Dados obtidos com sucesso! ({len(data)} registros)")
                    
                    # Transformar em DataFrame para melhor visualiza√ß√£o
                    if len(data) > 0:
                        if isinstance(data[0], list) and len(data) > 1:
                            # Caso 1: Resposta em formato de matriz (cabe√ßalhos + dados)
                            headers = data[0]
                            rows = data[1:]
                            df = pd.DataFrame(rows, columns=headers)
                        else:
                            # Caso 2: Lista de dicion√°rios
                            df = pd.DataFrame(data)
                        
                        st.dataframe(df)
                    else:
                        st.warning("A resposta est√° vazia (lista sem elementos).")
                elif isinstance(data, dict):
                    if "error" in data:
                        st.error(f"Erro retornado pela API: {data['error']}")
                        if "error_description" in data:
                            st.error(f"Descri√ß√£o: {data['error_description']}")
                    else:
                        st.success("Resposta obtida com sucesso (formato de dicion√°rio)")
                        st.json(data)
                else:
                    st.warning(f"Formato de resposta inesperado: {type(data)}")
                    st.json(data)
                    
            except json.JSONDecodeError:
                st.error("A resposta n√£o √© um JSON v√°lido.")
                st.code(response.text[:1000] + "..." if len(response.text) > 1000 else response.text)
        else:
            st.error(f"Falha na conex√£o: {response.status_code} - {response.reason}")
            st.code(response.text[:1000] + "..." if len(response.text) > 1000 else response.text)
    
    except requests.exceptions.Timeout:
        st.error("Erro: A conex√£o excedeu o tempo limite (timeout)")
    except requests.exceptions.ConnectionError:
        st.error("Erro: N√£o foi poss√≠vel conectar ao servidor")
    except Exception as e:
        st.error(f"Erro inesperado: {str(e)}")
        import traceback
        st.code(traceback.format_exc())

# Instru√ß√µes para resolu√ß√£o de problemas
with st.expander("Dicas para Resolu√ß√£o de Problemas"):
    st.markdown("""
    ### Problemas Comuns e Solu√ß√µes
    
    1. **Erro de autentica√ß√£o (401/403)**
       - Verifique se o token est√° correto
       - Confirme se o token ainda √© v√°lido (n√£o expirou)
       - Verifique se o token tem as permiss√µes necess√°rias
    
    2. **Timeout ou falha de conex√£o**
       - Verifique sua conex√£o com a internet
       - Confirme se a URL do Bitrix24 est√° correta
       - Verifique se o Bitrix24 n√£o est√° bloqueando sua conex√£o
    
    3. **Dados vazios**
       - Verifique os filtros utilizados (ex: categoria incorreta)
       - Confirme se realmente existem dados para o per√≠odo/filtro especificado
    
    4. **Resposta com erro de formato**
       - Verifique se a estrutura da requisi√ß√£o est√° correta
       - Confirme se os par√¢metros est√£o no formato esperado pela API
    
    ### Como Corrigir no Streamlit Cloud
    
    1. Acesse a configura√ß√£o do seu aplicativo no Streamlit Cloud
    2. V√° para a se√ß√£o "Secrets"
    3. Configure as secrets no formato:
    
    ```toml
    [bitrix]
    base_url = "https://seudominio.bitrix24.com.br/bitrix/tools/biconnector/pbi.php"
    token = "seu_token_aqui"
    category_id = 34
    
    # Ou no formato direto
    BITRIX_BASE_URL = "https://seudominio.bitrix24.com.br/bitrix/tools/biconnector/pbi.php"
    BITRIX_TOKEN = "seu_token_aqui"
    BITRIX_CATEGORY_ID = 34
    ```
    """)

# Adicionar informa√ß√µes do sistema
with st.expander("Informa√ß√µes do Sistema"):
    st.write("Python:", sys.version)
    st.write("Streamlit:", st.__version__)
    st.write("Requests:", requests.__version__)
    st.write("Pandas:", pd.__version__)
    
    st.write("Vari√°veis de ambiente relacionadas ao Bitrix24:")
    env_vars = {k: v[:4] + "..." if k.endswith("TOKEN") and v else v for k, v in os.environ.items() if k.startswith("BITRIX")}
    if env_vars:
        st.json(env_vars)
    else:
        st.write("Nenhuma vari√°vel de ambiente relacionada ao Bitrix24 encontrada")
    
    st.write("Caminho de execu√ß√£o:", os.getcwd()) 